"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.register = exports.compileCssSync = exports.compileCss = void 0;
/* eslint-disable @typescript-eslint/no-var-requires */
const pirates_1 = require("pirates");
const postcss_1 = __importDefault(require("postcss"));
const postcss_modules_sync_1 = __importDefault(require("postcss-modules-sync"));
const postcss_modules_1 = __importDefault(require("postcss-modules"));
const register_1 = require("@swc-node/register/register");
const crypto_1 = require("crypto");
function generateScopedName(name, filename, css) {
    const i = css.indexOf(`.${name}`);
    const lineNumber = css.substr(0, i).split(/[\r\n]/).length;
    const hash = (0, crypto_1.createHash)('md5').update(css).digest('hex');
    return `${name}_${hash}_${lineNumber}`;
}
async function compileCss(code, filename, config) {
    let exportedTokens = {};
    const plugins = [
        (0, postcss_modules_1.default)({
            generateScopedName: generateScopedName,
            getJSON: (cssFileName, json, outputFileName) => {
                exportedTokens = json;
            },
        }),
    ];
    let res = (0, postcss_1.default)(plugins).process(code, { from: filename });
    await res;
    // apply other postcss magic after class names have been mapped
    if ((config === null || config === void 0 ? void 0 : config.plugins) && config.plugins.length > 0) {
        res = (0, postcss_1.default)(config.plugins).process(res.css, { from: filename });
        await res;
    }
    const js = `module.exports = JSON.parse('${JSON.stringify(exportedTokens)}');`;
    return {
        js,
        css: res.css,
    };
}
exports.compileCss = compileCss;
function compileCssSync(code, filename, config) {
    let exportedTokens = {};
    const plugins = [
        (0, postcss_modules_sync_1.default)({
            generateScopedName: generateScopedName,
            getJSON: (tokens) => {
                exportedTokens = tokens;
            },
        }),
    ];
    if (config === null || config === void 0 ? void 0 : config.plugins) {
        plugins.push(...config.plugins);
    }
    const res = (0, postcss_1.default)(plugins).process(code, { from: filename });
    // the below is required to properly resolve `exportedTokens`
    res
        .then(() => {
        // all good
    })
        .catch((e) => {
        throw new Error(`Cannot compile CSS ${e.message}`);
    });
    const js = `module.exports = JSON.parse('${JSON.stringify(exportedTokens)}');`;
    return {
        js,
        css: res.css,
    };
}
exports.compileCssSync = compileCssSync;
function compileJsSync(code, filename) {
    return compileCssSync(code, filename).js;
}
const register = () => {
    (0, pirates_1.addHook)((code, filename) => compileJsSync(code, filename), {
        exts: ['.css'],
    });
    const tsConfig = {};
    (0, register_1.register)({ ...tsConfig });
};
exports.register = register;
//# sourceMappingURL=nodeCssRequire.js.map